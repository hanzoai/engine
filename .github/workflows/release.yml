name: Release Hanzo Engine

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.6.0)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build
      run: cargo build --package hanzo-engine --release --verbose

    - name: Run tests
      env:
        TESTS_HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: cargo test --package hanzo-engine --verbose

    - name: Check formatting
      run: cargo fmt --package hanzo-engine -- --check

    - name: Run clippy
      run: cargo clippy --package hanzo-engine -- -D warnings

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: build-and-test
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: hanzoai-linux-amd64
            features: cuda,flash-attn
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: hanzoai-linux-arm64
            features: cuda,flash-attn
          - target: x86_64-apple-darwin
            os: macos-latest
            name: hanzoai-macos-amd64
            features: metal
          - target: aarch64-apple-darwin
            os: macos-latest
            name: hanzoai-macos-arm64
            features: metal
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hanzoai-windows-amd64.exe
            features: ""

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install CUDA (Linux)
      if: runner.os == 'Linux'
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.1.0'

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      run: |
        cargo build --package hanzo-engine --release --target ${{ matrix.target }} --features ${{ matrix.features }}

    - name: Package binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../${{ matrix.name }}.zip hanzo-engine.exe
        else
          tar -czf ../../../${{ matrix.name }}.tar.gz hanzo-engine
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          *.tar.gz
          *.zip

  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- High-performance inference engine based on mistral.rs" >> CHANGELOG.md
        echo "- Support for Qwen3 models (8B/4B variants)" >> CHANGELOG.md
        echo "- Native embeddings and reranking" >> CHANGELOG.md
        echo "- CUDA support for NVIDIA GPUs" >> CHANGELOG.md
        echo "- Metal support for Apple Silicon" >> CHANGELOG.md
        echo "- Flash Attention v3 support" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo '# Download for your platform' >> CHANGELOG.md
        echo 'curl -L https://github.com/hanzoai/engine/releases/latest/download/hanzoai-$(uname -s | tr "[:upper:]" "[:lower:]")-$(uname -m).tar.gz | tar -xz' >> CHANGELOG.md
        echo 'sudo mv hanzo-engine /usr/local/bin/hanzoai' >> CHANGELOG.md
        echo '```' >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/**/*
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    name: Publish Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Create Dockerfile for hanzo-engine
      run: |
        cat > Dockerfile.hanzo <<'EOF'
        FROM nvidia/cuda:12.1.0-runtime-ubuntu22.04 AS runtime

        # Install runtime dependencies
        RUN apt-get update && apt-get install -y \
            libssl3 \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/*

        # Copy the built binary
        COPY target/release/hanzo-engine /usr/local/bin/hanzoai

        # Create model storage directory
        RUN mkdir -p /root/.hanzo/models

        # Set environment variables
        ENV RUST_LOG=info
        ENV HANZO_HOME=/root/.hanzo

        # Expose ports
        EXPOSE 3690

        # Run the engine
        ENTRYPOINT ["/usr/local/bin/hanzoai"]
        CMD ["--help"]
        EOF

    - name: Build hanzo-engine
      run: |
        cargo build --package hanzo-engine --release --features cuda,flash-attn

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.hanzo
        platforms: linux/amd64
        push: true
        tags: |
          hanzoai/engine:latest
          hanzoai/engine:${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max